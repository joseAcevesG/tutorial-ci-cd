name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: .

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: .

      - name: Set VERSION_TAG and DOCKER_IMAGE
        run: |
          VERSION_TAG="1.0.${{ github.run_id }}-${{ github.ref_name }}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${VERSION_TAG}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Docker image
        run: docker build -t my-app-image .

      - name: Tag and push Docker image
        run: |
          docker tag my-app-image:latest $DOCKER_IMAGE
          docker push $DOCKER_IMAGE

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Set VERSION_TAG and DOCKER_IMAGE
        run: |
          VERSION_TAG="1.0.${{ github.run_id }}-${{ github.ref_name }}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${VERSION_TAG}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Create temporary SSH key
        run: echo "${{ secrets.EC2_KEY }}" > /tmp/ssh_key.pem

      - name: Set permissions for SSH key
        run: chmod 600 /tmp/ssh_key.pem

      - name: Log in to Amazon ECR and deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_DEV }} << 'EOF'
            $(aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com)
            docker pull $DOCKER_IMAGE
            docker stop demo-twelve || true
            docker container rm -f demo-twelve || true
            docker run -d --name demo-twelve -p 8080:8080 $DOCKER_IMAGE
          EOF
